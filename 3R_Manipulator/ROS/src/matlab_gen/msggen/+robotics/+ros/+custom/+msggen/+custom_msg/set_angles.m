classdef set_angles < robotics.ros.Message
    %set_angles MATLAB implementation of custom_msg/set_angles
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2021 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'custom_msg/set_angles' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'f893037d084fc53525471a607a7aa8b3' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        SetOMB
        SetCOT
        SetPUN
        SetGAR
        Reset
        Retry
        EmergencyStop
        SetKpPUN
        SetKiPUN
        SetKdPUN
        SetKpOMB
        SetKiOMB
        SetKdOMB
        SetKpGAR
        SetKiGAR
        SetKdGAR
    end
    
    properties (Constant, Hidden)
        PropertyList = {'EmergencyStop', 'Reset', 'Retry', 'SetCOT', 'SetGAR', 'SetKdGAR', 'SetKdOMB', 'SetKdPUN', 'SetKiGAR', 'SetKiOMB', 'SetKiPUN', 'SetKpGAR', 'SetKpOMB', 'SetKpPUN', 'SetOMB', 'SetPUN'} % List of non-constant message properties
        ROSPropertyList = {'emergency_stop', 'reset', 'retry', 'set_COT', 'set_GAR', 'set_Kd_GAR', 'set_Kd_OMB', 'set_Kd_PUN', 'set_Ki_GAR', 'set_Ki_OMB', 'set_Ki_PUN', 'set_Kp_GAR', 'set_Kp_OMB', 'set_Kp_PUN', 'set_OMB', 'set_PUN'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = set_angles(msg)
            %set_angles Construct the message object set_angles
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function setomb = get.SetOMB(obj)
            %get.SetOMB Get the value for property SetOMB
            setomb = single(obj.JavaMessage.getSetOMB);
        end
        
        function set.SetOMB(obj, setomb)
            %set.SetOMB Set the value for property SetOMB
            validateattributes(setomb, {'numeric'}, {'nonempty', 'scalar'}, 'set_angles', 'SetOMB');
            
            obj.JavaMessage.setSetOMB(setomb);
        end
        
        function setcot = get.SetCOT(obj)
            %get.SetCOT Get the value for property SetCOT
            setcot = single(obj.JavaMessage.getSetCOT);
        end
        
        function set.SetCOT(obj, setcot)
            %set.SetCOT Set the value for property SetCOT
            validateattributes(setcot, {'numeric'}, {'nonempty', 'scalar'}, 'set_angles', 'SetCOT');
            
            obj.JavaMessage.setSetCOT(setcot);
        end
        
        function setpun = get.SetPUN(obj)
            %get.SetPUN Get the value for property SetPUN
            setpun = single(obj.JavaMessage.getSetPUN);
        end
        
        function set.SetPUN(obj, setpun)
            %set.SetPUN Set the value for property SetPUN
            validateattributes(setpun, {'numeric'}, {'nonempty', 'scalar'}, 'set_angles', 'SetPUN');
            
            obj.JavaMessage.setSetPUN(setpun);
        end
        
        function setgar = get.SetGAR(obj)
            %get.SetGAR Get the value for property SetGAR
            setgar = logical(obj.JavaMessage.getSetGAR);
        end
        
        function set.SetGAR(obj, setgar)
            %set.SetGAR Set the value for property SetGAR
            validateattributes(setgar, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'set_angles', 'SetGAR');
            
            obj.JavaMessage.setSetGAR(setgar);
        end
        
        function reset = get.Reset(obj)
            %get.Reset Get the value for property Reset
            reset = logical(obj.JavaMessage.getReset);
        end
        
        function set.Reset(obj, reset)
            %set.Reset Set the value for property Reset
            validateattributes(reset, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'set_angles', 'Reset');
            
            obj.JavaMessage.setReset(reset);
        end
        
        function retry = get.Retry(obj)
            %get.Retry Get the value for property Retry
            retry = logical(obj.JavaMessage.getRetry);
        end
        
        function set.Retry(obj, retry)
            %set.Retry Set the value for property Retry
            validateattributes(retry, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'set_angles', 'Retry');
            
            obj.JavaMessage.setRetry(retry);
        end
        
        function emergencystop = get.EmergencyStop(obj)
            %get.EmergencyStop Get the value for property EmergencyStop
            emergencystop = logical(obj.JavaMessage.getEmergencyStop);
        end
        
        function set.EmergencyStop(obj, emergencystop)
            %set.EmergencyStop Set the value for property EmergencyStop
            validateattributes(emergencystop, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'set_angles', 'EmergencyStop');
            
            obj.JavaMessage.setEmergencyStop(emergencystop);
        end
        
        function setkppun = get.SetKpPUN(obj)
            %get.SetKpPUN Get the value for property SetKpPUN
            setkppun = single(obj.JavaMessage.getSetKpPUN);
        end
        
        function set.SetKpPUN(obj, setkppun)
            %set.SetKpPUN Set the value for property SetKpPUN
            validateattributes(setkppun, {'numeric'}, {'nonempty', 'scalar'}, 'set_angles', 'SetKpPUN');
            
            obj.JavaMessage.setSetKpPUN(setkppun);
        end
        
        function setkipun = get.SetKiPUN(obj)
            %get.SetKiPUN Get the value for property SetKiPUN
            setkipun = single(obj.JavaMessage.getSetKiPUN);
        end
        
        function set.SetKiPUN(obj, setkipun)
            %set.SetKiPUN Set the value for property SetKiPUN
            validateattributes(setkipun, {'numeric'}, {'nonempty', 'scalar'}, 'set_angles', 'SetKiPUN');
            
            obj.JavaMessage.setSetKiPUN(setkipun);
        end
        
        function setkdpun = get.SetKdPUN(obj)
            %get.SetKdPUN Get the value for property SetKdPUN
            setkdpun = single(obj.JavaMessage.getSetKdPUN);
        end
        
        function set.SetKdPUN(obj, setkdpun)
            %set.SetKdPUN Set the value for property SetKdPUN
            validateattributes(setkdpun, {'numeric'}, {'nonempty', 'scalar'}, 'set_angles', 'SetKdPUN');
            
            obj.JavaMessage.setSetKdPUN(setkdpun);
        end
        
        function setkpomb = get.SetKpOMB(obj)
            %get.SetKpOMB Get the value for property SetKpOMB
            setkpomb = single(obj.JavaMessage.getSetKpOMB);
        end
        
        function set.SetKpOMB(obj, setkpomb)
            %set.SetKpOMB Set the value for property SetKpOMB
            validateattributes(setkpomb, {'numeric'}, {'nonempty', 'scalar'}, 'set_angles', 'SetKpOMB');
            
            obj.JavaMessage.setSetKpOMB(setkpomb);
        end
        
        function setkiomb = get.SetKiOMB(obj)
            %get.SetKiOMB Get the value for property SetKiOMB
            setkiomb = single(obj.JavaMessage.getSetKiOMB);
        end
        
        function set.SetKiOMB(obj, setkiomb)
            %set.SetKiOMB Set the value for property SetKiOMB
            validateattributes(setkiomb, {'numeric'}, {'nonempty', 'scalar'}, 'set_angles', 'SetKiOMB');
            
            obj.JavaMessage.setSetKiOMB(setkiomb);
        end
        
        function setkdomb = get.SetKdOMB(obj)
            %get.SetKdOMB Get the value for property SetKdOMB
            setkdomb = single(obj.JavaMessage.getSetKdOMB);
        end
        
        function set.SetKdOMB(obj, setkdomb)
            %set.SetKdOMB Set the value for property SetKdOMB
            validateattributes(setkdomb, {'numeric'}, {'nonempty', 'scalar'}, 'set_angles', 'SetKdOMB');
            
            obj.JavaMessage.setSetKdOMB(setkdomb);
        end
        
        function setkpgar = get.SetKpGAR(obj)
            %get.SetKpGAR Get the value for property SetKpGAR
            setkpgar = single(obj.JavaMessage.getSetKpGAR);
        end
        
        function set.SetKpGAR(obj, setkpgar)
            %set.SetKpGAR Set the value for property SetKpGAR
            validateattributes(setkpgar, {'numeric'}, {'nonempty', 'scalar'}, 'set_angles', 'SetKpGAR');
            
            obj.JavaMessage.setSetKpGAR(setkpgar);
        end
        
        function setkigar = get.SetKiGAR(obj)
            %get.SetKiGAR Get the value for property SetKiGAR
            setkigar = single(obj.JavaMessage.getSetKiGAR);
        end
        
        function set.SetKiGAR(obj, setkigar)
            %set.SetKiGAR Set the value for property SetKiGAR
            validateattributes(setkigar, {'numeric'}, {'nonempty', 'scalar'}, 'set_angles', 'SetKiGAR');
            
            obj.JavaMessage.setSetKiGAR(setkigar);
        end
        
        function setkdgar = get.SetKdGAR(obj)
            %get.SetKdGAR Get the value for property SetKdGAR
            setkdgar = single(obj.JavaMessage.getSetKdGAR);
        end
        
        function set.SetKdGAR(obj, setkdgar)
            %set.SetKdGAR Set the value for property SetKdGAR
            validateattributes(setkdgar, {'numeric'}, {'nonempty', 'scalar'}, 'set_angles', 'SetKdGAR');
            
            obj.JavaMessage.setSetKdGAR(setkdgar);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.SetOMB = obj.SetOMB;
            cpObj.SetCOT = obj.SetCOT;
            cpObj.SetPUN = obj.SetPUN;
            cpObj.SetGAR = obj.SetGAR;
            cpObj.Reset = obj.Reset;
            cpObj.Retry = obj.Retry;
            cpObj.EmergencyStop = obj.EmergencyStop;
            cpObj.SetKpPUN = obj.SetKpPUN;
            cpObj.SetKiPUN = obj.SetKiPUN;
            cpObj.SetKdPUN = obj.SetKdPUN;
            cpObj.SetKpOMB = obj.SetKpOMB;
            cpObj.SetKiOMB = obj.SetKiOMB;
            cpObj.SetKdOMB = obj.SetKdOMB;
            cpObj.SetKpGAR = obj.SetKpGAR;
            cpObj.SetKiGAR = obj.SetKiGAR;
            cpObj.SetKdGAR = obj.SetKdGAR;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.SetOMB = strObj.SetOMB;
            obj.SetCOT = strObj.SetCOT;
            obj.SetPUN = strObj.SetPUN;
            obj.SetGAR = strObj.SetGAR;
            obj.Reset = strObj.Reset;
            obj.Retry = strObj.Retry;
            obj.EmergencyStop = strObj.EmergencyStop;
            obj.SetKpPUN = strObj.SetKpPUN;
            obj.SetKiPUN = strObj.SetKiPUN;
            obj.SetKdPUN = strObj.SetKdPUN;
            obj.SetKpOMB = strObj.SetKpOMB;
            obj.SetKiOMB = strObj.SetKiOMB;
            obj.SetKdOMB = strObj.SetKdOMB;
            obj.SetKpGAR = strObj.SetKpGAR;
            obj.SetKiGAR = strObj.SetKiGAR;
            obj.SetKdGAR = strObj.SetKdGAR;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.SetOMB = obj.SetOMB;
            strObj.SetCOT = obj.SetCOT;
            strObj.SetPUN = obj.SetPUN;
            strObj.SetGAR = obj.SetGAR;
            strObj.Reset = obj.Reset;
            strObj.Retry = obj.Retry;
            strObj.EmergencyStop = obj.EmergencyStop;
            strObj.SetKpPUN = obj.SetKpPUN;
            strObj.SetKiPUN = obj.SetKiPUN;
            strObj.SetKdPUN = obj.SetKdPUN;
            strObj.SetKpOMB = obj.SetKpOMB;
            strObj.SetKiOMB = obj.SetKiOMB;
            strObj.SetKdOMB = obj.SetKdOMB;
            strObj.SetKpGAR = obj.SetKpGAR;
            strObj.SetKiGAR = obj.SetKiGAR;
            strObj.SetKdGAR = obj.SetKdGAR;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.custom_msg.set_angles.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.custom_msg.set_angles;
            obj.reload(strObj);
        end
    end
end
